// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(LDBContext))]
    partial class LDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.attendance", b =>
                {
                    b.Property<int>("attendanceid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("attendanceid"));

                    b.Property<bool>("ispresent")
                        .HasColumnType("boolean");

                    b.Property<int>("lectureid")
                        .HasColumnType("integer");

                    b.Property<string>("note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("recordedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasKey("attendanceid")
                        .HasName("attendance_pkey");

                    b.HasIndex("userid");

                    b.HasIndex(new[] { "lectureid", "userid" }, "attendance_lectureid_userid_key")
                        .IsUnique();

                    b.ToTable("attendance", (string)null);
                });

            modelBuilder.Entity("Domain.Models.city", b =>
                {
                    b.Property<int>("cityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("cityid"));

                    b.Property<string>("cityname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("postalcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("cityid")
                        .HasName("cities_pkey");

                    b.HasIndex(new[] { "cityname" }, "cities_cityname_key")
                        .IsUnique();

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Domain.Models.group", b =>
                {
                    b.Property<int>("groupid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("groupid"));

                    b.Property<int?>("course")
                        .HasColumnType("integer");

                    b.Property<int>("curatorid")
                        .HasColumnType("integer");

                    b.Property<string>("groupname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("institutionid")
                        .HasColumnType("integer");

                    b.Property<string>("specialty")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("groupid")
                        .HasName("groups_pkey");

                    b.HasIndex("curatorid");

                    b.HasIndex("institutionid");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("Domain.Models.institution", b =>
                {
                    b.Property<int>("institutionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("institutionid"));

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("cityid")
                        .HasColumnType("integer");

                    b.Property<string>("institutionname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("website")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("institutionid")
                        .HasName("institution_pkey");

                    b.HasIndex("cityid");

                    b.ToTable("institution", (string)null);
                });

            modelBuilder.Entity("Domain.Models.lecture", b =>
                {
                    b.Property<int>("lectureid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("lectureid"));

                    b.Property<DateTime?>("createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("endtime")
                        .HasColumnType("time without time zone");

                    b.Property<bool?>("isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("lecturename")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("roomid")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("starttime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("teacherid")
                        .HasColumnType("integer");

                    b.HasKey("lectureid")
                        .HasName("lectures_pkey");

                    b.HasIndex("roomid");

                    b.HasIndex("teacherid");

                    b.ToTable("lectures");
                });

            modelBuilder.Entity("Domain.Models.notification", b =>
                {
                    b.Property<int>("notificationid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("notificationid"));

                    b.Property<DateTime?>("createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool?>("isread")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasKey("notificationid")
                        .HasName("notifications_pkey");

                    b.HasIndex("userid");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Domain.Models.portfolio", b =>
                {
                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.Property<string>("achievement")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("addedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("userid", "achievement")
                        .HasName("portfolio_pkey");

                    b.ToTable("portfolio", (string)null);
                });

            modelBuilder.Entity("Domain.Models.room", b =>
                {
                    b.Property<int>("roomid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("roomid"));

                    b.Property<int>("institutionid")
                        .HasColumnType("integer");

                    b.Property<string>("roomnumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("roomid")
                        .HasName("rooms_pkey");

                    b.HasIndex("institutionid");

                    b.HasIndex(new[] { "roomnumber", "institutionid" }, "rooms_roomnumber_institutionid_key")
                        .IsUnique();

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Domain.Models.room_equipment", b =>
                {
                    b.Property<int>("roomid")
                        .HasColumnType("integer");

                    b.Property<string>("equipment")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("roomid", "equipment")
                        .HasName("room_equipment_pkey");

                    b.ToTable("room_equipment", (string)null);
                });

            modelBuilder.Entity("Domain.Models.students_group", b =>
                {
                    b.Property<DateOnly?>("enrolledat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int>("groupid")
                        .HasColumnType("integer");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasIndex("groupid");

                    b.HasIndex("userid");

                    b.ToTable("students_groups");
                });

            modelBuilder.Entity("Domain.Models.user", b =>
                {
                    b.Property<int>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("userid"));

                    b.Property<string>("avatar")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasDefaultValueSql("'/def.png'::character varying");

                    b.Property<DateTime?>("createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool?>("isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("passwordhash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("patronymic")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("surname")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("telephonnumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("userid")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("lectures_group", b =>
                {
                    b.Property<int>("groupid")
                        .HasColumnType("integer");

                    b.Property<int>("lectureid")
                        .HasColumnType("integer");

                    b.HasKey("groupid", "lectureid")
                        .HasName("lectures_groups_pkey");

                    b.HasIndex("lectureid");

                    b.ToTable("lectures_groups", (string)null);
                });

            modelBuilder.Entity("Domain.Models.attendance", b =>
                {
                    b.HasOne("Domain.Models.lecture", "lecture")
                        .WithMany("attendances")
                        .HasForeignKey("lectureid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("attendance_lectureid_fkey");

                    b.HasOne("Domain.Models.user", "user")
                        .WithMany("attendances")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("attendance_userid_fkey");

                    b.Navigation("lecture");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Models.group", b =>
                {
                    b.HasOne("Domain.Models.user", "curator")
                        .WithMany("groups")
                        .HasForeignKey("curatorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("groups_curatorid_fkey");

                    b.HasOne("Domain.Models.institution", "institution")
                        .WithMany("groups")
                        .HasForeignKey("institutionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("groups_institutionid_fkey");

                    b.Navigation("curator");

                    b.Navigation("institution");
                });

            modelBuilder.Entity("Domain.Models.institution", b =>
                {
                    b.HasOne("Domain.Models.city", "cityNavigation")
                        .WithMany("institutions")
                        .HasForeignKey("cityid")
                        .HasConstraintName("institution_cityid_fkey");

                    b.Navigation("cityNavigation");
                });

            modelBuilder.Entity("Domain.Models.lecture", b =>
                {
                    b.HasOne("Domain.Models.room", "room")
                        .WithMany("lectures")
                        .HasForeignKey("roomid")
                        .HasConstraintName("lectures_roomid_fkey");

                    b.HasOne("Domain.Models.user", "teacher")
                        .WithMany("lectures")
                        .HasForeignKey("teacherid")
                        .IsRequired()
                        .HasConstraintName("lectures_teacherid_fkey");

                    b.Navigation("room");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("Domain.Models.notification", b =>
                {
                    b.HasOne("Domain.Models.user", "user")
                        .WithMany("notifications")
                        .HasForeignKey("userid")
                        .IsRequired()
                        .HasConstraintName("notifications_userid_fkey");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Models.portfolio", b =>
                {
                    b.HasOne("Domain.Models.user", "user")
                        .WithMany("portfolios")
                        .HasForeignKey("userid")
                        .IsRequired()
                        .HasConstraintName("portfolio_userid_fkey");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Models.room", b =>
                {
                    b.HasOne("Domain.Models.institution", "institution")
                        .WithMany("rooms")
                        .HasForeignKey("institutionid")
                        .IsRequired()
                        .HasConstraintName("rooms_institutionid_fkey");

                    b.Navigation("institution");
                });

            modelBuilder.Entity("Domain.Models.room_equipment", b =>
                {
                    b.HasOne("Domain.Models.room", "room")
                        .WithMany("room_equipments")
                        .HasForeignKey("roomid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("room_equipment_roomid_fkey");

                    b.Navigation("room");
                });

            modelBuilder.Entity("Domain.Models.students_group", b =>
                {
                    b.HasOne("Domain.Models.group", "group")
                        .WithMany()
                        .HasForeignKey("groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("students_groups_groupid_fkey");

                    b.HasOne("Domain.Models.user", "user")
                        .WithMany()
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("students_groups_userid_fkey");

                    b.Navigation("group");

                    b.Navigation("user");
                });

            modelBuilder.Entity("lectures_group", b =>
                {
                    b.HasOne("Domain.Models.group", null)
                        .WithMany()
                        .HasForeignKey("groupid")
                        .IsRequired()
                        .HasConstraintName("lectures_groups_groupid_fkey");

                    b.HasOne("Domain.Models.lecture", null)
                        .WithMany()
                        .HasForeignKey("lectureid")
                        .IsRequired()
                        .HasConstraintName("lectures_groups_lectureid_fkey");
                });

            modelBuilder.Entity("Domain.Models.city", b =>
                {
                    b.Navigation("institutions");
                });

            modelBuilder.Entity("Domain.Models.institution", b =>
                {
                    b.Navigation("groups");

                    b.Navigation("rooms");
                });

            modelBuilder.Entity("Domain.Models.lecture", b =>
                {
                    b.Navigation("attendances");
                });

            modelBuilder.Entity("Domain.Models.room", b =>
                {
                    b.Navigation("lectures");

                    b.Navigation("room_equipments");
                });

            modelBuilder.Entity("Domain.Models.user", b =>
                {
                    b.Navigation("attendances");

                    b.Navigation("groups");

                    b.Navigation("lectures");

                    b.Navigation("notifications");

                    b.Navigation("portfolios");
                });
#pragma warning restore 612, 618
        }
    }
}
