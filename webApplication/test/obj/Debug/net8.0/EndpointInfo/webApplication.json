{
  "openapi": "3.0.4",
  "info": {
    "title": "Интернет-магазин API",
    "description": "Краткое описание вашего API",
    "contact": {
      "name": "Пример контакта",
      "url": "https://example.com/contact"
    },
    "license": {
      "name": "Пример лицензии",
      "url": "https://example.com/license"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Attendance": {
      "get": {
        "tags": [
          "Attendance"
        ],
        "summary": "Get all attendances",
        "description": "Enter attendance id",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Attendance"
        ],
        "summary": "Add attendance to user",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"lectureid\" : 1,\r\n       \"userid\" : 1,\r\n       \"ispresent\" : true,\r\n       \"note\" : \"text\",\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attendance"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/attendance"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/attendance"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Attendance"
        ],
        "summary": "Update attendance to user",
        "description": "Query Example\r\n            \r\n    PUT /Todo\r\n    {\r\n       \"attendanceid\" : 1,\r\n       \"lectureid\" : 1,\r\n       \"userid\" : 1,\r\n       \"ispresent\" : true,\r\n       \"note\" : \"text\",\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attendance"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/attendance"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/attendance"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Attendance"
        ],
        "summary": "Delete attendance by attendance id",
        "description": "Enter attendance id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Attendance/{id}": {
      "get": {
        "tags": [
          "Attendance"
        ],
        "summary": "Get attendance by attendance id",
        "description": "Enter attendance id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/City": {
      "get": {
        "tags": [
          "City"
        ],
        "summary": "Get citys",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "City"
        ],
        "summary": "Add new City",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"cityname\" : \"cool\",\r\n       \"postalcode\" : \"123\",\r\n       \"county\" : \"Moscow\",\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/city"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/city"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/city"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "City"
        ],
        "summary": "Update City",
        "description": "Query Example\r\n            \r\n    PUT /Todo\r\n    {\r\n       \"cityid\" : 1,\r\n       \"cityname\" : \"cool\",\r\n       \"postalcode\" : \"123\",\r\n       \"county\" : \"Moscow\",\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/city"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/city"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/city"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "City"
        ],
        "summary": "Delete City by id",
        "description": "Enter city id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/City/{id}": {
      "get": {
        "tags": [
          "City"
        ],
        "summary": "Get city by id",
        "description": "Enter city id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Group": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get Groups",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add new Group",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"groupname\" : \"cool\",\r\n       \"course\" : 1,\r\n       \"curatorid\" : 1,\r\n       \"specialty\" : \"proggramist\",\r\n       \"institutionid\" : 1,\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/group"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/group"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Update Group",
        "description": "Query Example\r\n            \r\n    PUT /Todo\r\n    {\r\n       \"groupid\" : 1,\r\n       \"groupname\" : \"cool\",\r\n       \"course\" : 1,\r\n       \"curatorid\" : 1,\r\n       \"specialty\" : \"proggramist\",\r\n       \"institutionid\" : 1,\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/group"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/group"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete Group by id",
        "description": "Enter group id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Group/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get Group by id",
        "description": "Enter group id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Instituton": {
      "get": {
        "tags": [
          "Instituton"
        ],
        "summary": "Get institutions",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Instituton"
        ],
        "summary": "Add new institution",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"institutionname\" : \"cool\",\r\n       \"street\" : \"streer\",\r\n       \"phone\" : \"+79032432030\",\r\n       \"website\" : \"linc\",\r\n       \"cityid\" : 1,\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/institution"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/institution"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/institution"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Instituton"
        ],
        "summary": "Update institution",
        "description": "Query Example\r\n            \r\n    PUT /Todo\r\n    {\r\n       \"institutionid\" : 1,\r\n       \"institutionname\" : \"cool\",\r\n       \"street\" : \"streer\",\r\n       \"phone\" : \"+79032432030\",\r\n       \"website\" : \"linc\",\r\n       \"cityid\" : 1,\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/institution"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/institution"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/institution"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Instituton"
        ],
        "summary": "Delete institution",
        "description": "Enter institution id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Instituton/{id}": {
      "get": {
        "tags": [
          "Instituton"
        ],
        "summary": "Get institution by id",
        "description": "Enter institution id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Lecture": {
      "get": {
        "tags": [
          "Lecture"
        ],
        "summary": "Get all lectures",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Lecture"
        ],
        "summary": "Add new lecture",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"lecturename\" : 1,\r\n       \"descriiption\" : \"parallel  cuda programming\",\r\n       \"starttime\" : 20:20:20,\r\n       \"endtime\" : 21:21:21,\r\n       \"teacherid\" : 1,\r\n       \"roomid\" : 1,\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lecture"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/lecture"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/lecture"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Lecture"
        ],
        "summary": "Update lecture",
        "description": "Query Example\r\n            \r\n    Put /Todo\r\n    {\r\n       \"lectureid\" : 1\r\n       \"lecturename\" : 1,\r\n       \"descriiption\" : \"parallel  cuda programming\",\r\n       \"starttime\" : 20:20:20,\r\n       \"endtime\" : 21:21:21,\r\n       \"teacherid\" : 1,\r\n       \"roomid\" : 1,\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lecture"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/lecture"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/lecture"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Lecture"
        ],
        "summary": "Delete lecture by id",
        "description": "Enter lecture id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Lecture/{id}": {
      "get": {
        "tags": [
          "Lecture"
        ],
        "summary": "Get lecture by id",
        "description": "Enter lecture id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/LectureGroups": {
      "get": {
        "tags": [
          "LectureGroups"
        ],
        "summary": "GET lectures and groups",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "LectureGroups"
        ],
        "summary": "Add new lecture to group",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"groupid\" : 1,\r\n       \"lectureid\" : 1,\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lectures_group"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/lectures_group"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/lectures_group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "LectureGroups"
        ],
        "summary": "Update lecture or group",
        "description": "Query Example\r\n            \r\n    PUT /Todo\r\n    {\r\n       \"groupid\" : 1,\r\n       \"lectureid\" : 1,\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lectures_group"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/lectures_group"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/lectures_group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "LectureGroups"
        ],
        "summary": "Delete lecture by group id",
        "description": "enter group id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/LectureGroups/{id}": {
      "get": {
        "tags": [
          "LectureGroups"
        ],
        "summary": "GET lectures by group id",
        "description": "Enter group id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Notificatiion": {
      "get": {
        "tags": [
          "Notificatiion"
        ],
        "summary": "Get all notifications",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Notificatiion"
        ],
        "summary": "Add new notificarion to user",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"notificationid\" : 1,\r\n       \"userid\" : 1,\r\n       \"note\" : \"12123\",\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notification"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/notification"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/notification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Notificatiion"
        ],
        "summary": "Update notification",
        "description": "Query Example\r\n            \r\n    PUT /Todo\r\n    {\r\n       \"notificationid\" : 1,\r\n       \"userid\" : 1,\r\n       \"note\" : \"12123\",\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/notification"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/notification"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/notification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Notificatiion"
        ],
        "summary": "Delete notification by notification id",
        "description": "Enter notification id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Notificatiion/{id}": {
      "get": {
        "tags": [
          "Notificatiion"
        ],
        "summary": "Get notification by notification id",
        "description": "Enter notification id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Portfolio": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get achevement by user id",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Add new achevement to user",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"userid\" : 1,\r\n       \"achevement\" : \"12123\",\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/portfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Update achevement",
        "description": "Query Example\r\n    PUT /Todo\r\n    {\r\n       \"userid\" : 1,\r\n       \"achevement\" : \"12123\",\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/portfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Update achevement",
        "description": "Enter user id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Portfolio/{id}": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get achevement by user id",
        "description": "Enter user id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Room": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get rooms",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Room"
        ],
        "summary": "Add new room",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"roomid\" : 1,\r\n       \"roomnumber\" : \"12123\",\r\n       \"institutionid\" : 1,\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/room"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/room"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/room"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Room"
        ],
        "summary": "Add new room",
        "description": "Query Example\r\n            \r\n    PUT /Todo\r\n    {\r\n       \"roomid\" : 1,\r\n       \"roomnumber\" : \"12123\",\r\n       \"institutionid\" : 1,\r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/room"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/room"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/room"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Room"
        ],
        "summary": "Delete room by id",
        "description": "Enter room id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Room/{id}": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Get room by id",
        "description": "Enter room id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/RoomEquipment": {
      "get": {
        "tags": [
          "RoomEquipment"
        ],
        "summary": "Get rooms equipment",
        "description": "Enter room id",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "RoomEquipment"
        ],
        "summary": "Add equipment to room",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"roomid\" : 1,\r\n       \"equipment\" : 1,      \r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/room_equipment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/room_equipment"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/room_equipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "RoomEquipment"
        ],
        "summary": "Add equipment to room",
        "description": "Query Example\r\n            \r\n    PUT /Todo\r\n    {\r\n       \"roomid\" : 1,\r\n       \"equipment\" : 1,      \r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/room_equipment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/room_equipment"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/room_equipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "RoomEquipment"
        ],
        "summary": "Add equipment to room",
        "description": "Enter room id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/RoomEquipment/{id}": {
      "get": {
        "tags": [
          "RoomEquipment"
        ],
        "summary": "Get room equipment by room id",
        "description": "Enter room id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/StudentsGroup": {
      "get": {
        "tags": [
          "StudentsGroup"
        ],
        "summary": "Get lecture and group",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "StudentsGroup"
        ],
        "summary": "Add lecture to group",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"groupid\" : 1,\r\n       \"lectureid\" : 1,      \r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/students_group"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/students_group"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/students_group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "StudentsGroup"
        ],
        "summary": "Update lecture to group",
        "description": "Query Example\r\n            \r\n    PUT /Todo\r\n    {\r\n       \"groupid\" : 1,\r\n       \"lectureid\" : 1,      \r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/students_group"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/students_group"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/students_group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "StudentsGroup"
        ],
        "summary": "Add lecture to group",
        "description": "Enter lectur id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/StudentsGroup/{id}": {
      "get": {
        "tags": [
          "StudentsGroup"
        ],
        "summary": "Get lecture and group by lecture id",
        "description": "Enter lectur id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/User": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create new user",
        "description": "Query Example\r\n            \r\n    POST /Todo\r\n    {\r\n       \"name\" : \"Мax\",\r\n       \"surname\" : \"Morgan\",\r\n       \"avatar\" : \"pathToImage/\",\r\n       \"patronymic\" : \"___\" nullable,\r\n       \"email\" : \"example@mail.ru\",\r\n       \"telephonnumber\" : \"+79042391023\"      \r\n       \"passwordhash\" : \"jhdsDHJD-12jda\",\r\n       \"role\" : \"Student/Teacher/Admin\" one of them,\r\n       \"isactive\" : true/false filled in by itself, usually true,\r\n       \"createdat\" : date.now() filled in by itself,        \r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update user",
        "description": "Query Example\r\n            \r\n    PUT /Todo\r\n    {\r\n       \"userid\" : 4\r\n       \"name\" : \"Мax\",\r\n       \"surname\" : \"Morgan\",\r\n       \"avatar\" : \"pathToImage/\",\r\n       \"patronymic\" : \"___\" nullable,\r\n       \"email\" : \"example@mail.ru\",\r\n       \"telephonnumber\" : \"+79042391023\"      \r\n       \"passwordhash\" : \"jhdsDHJD-12jda\",\r\n       \"role\" : \"Student/Teacher/Admin\" one of them,\r\n       \"isactive\" : true/false filled in by itself, usually true,\r\n       \"createdat\" : date.now() filled in by itself,  \r\n    }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete user",
        "description": "Enter user id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/User/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by id",
        "description": "Enter id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "attendance": {
        "type": "object",
        "properties": {
          "attendanceid": {
            "type": "integer",
            "format": "int32"
          },
          "lectureid": {
            "type": "integer",
            "format": "int32"
          },
          "userid": {
            "type": "integer",
            "format": "int32"
          },
          "ispresent": {
            "type": "boolean"
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "recordedat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lecture": {
            "$ref": "#/components/schemas/lecture"
          },
          "user": {
            "$ref": "#/components/schemas/user"
          }
        },
        "additionalProperties": false
      },
      "city": {
        "type": "object",
        "properties": {
          "cityid": {
            "type": "integer",
            "format": "int32"
          },
          "cityname": {
            "type": "string",
            "nullable": true
          },
          "postalcode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "institutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/institution"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "group": {
        "type": "object",
        "properties": {
          "groupid": {
            "type": "integer",
            "format": "int32"
          },
          "groupname": {
            "type": "string",
            "nullable": true
          },
          "course": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "curatorid": {
            "type": "integer",
            "format": "int32"
          },
          "specialty": {
            "type": "string",
            "nullable": true
          },
          "institutionid": {
            "type": "integer",
            "format": "int32"
          },
          "curator": {
            "$ref": "#/components/schemas/user"
          },
          "institution": {
            "$ref": "#/components/schemas/institution"
          },
          "lectures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lecture"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "institution": {
        "type": "object",
        "properties": {
          "institutionid": {
            "type": "integer",
            "format": "int32"
          },
          "institutionname": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "cityid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cityNavigation": {
            "$ref": "#/components/schemas/city"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group"
            },
            "nullable": true
          },
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/room"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "lecture": {
        "type": "object",
        "properties": {
          "lectureid": {
            "type": "integer",
            "format": "int32"
          },
          "lecturename": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "starttime": {
            "type": "string",
            "format": "time"
          },
          "endtime": {
            "type": "string",
            "format": "time"
          },
          "teacherid": {
            "type": "integer",
            "format": "int32"
          },
          "roomid": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isactive": {
            "type": "boolean",
            "nullable": true
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "attendances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/attendance"
            },
            "nullable": true
          },
          "room": {
            "$ref": "#/components/schemas/room"
          },
          "teacher": {
            "$ref": "#/components/schemas/user"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "lectures_group": {
        "type": "object",
        "properties": {
          "groupid": {
            "type": "integer",
            "format": "int32"
          },
          "lectureid": {
            "type": "integer",
            "format": "int32"
          },
          "group": {
            "$ref": "#/components/schemas/group"
          },
          "lecture": {
            "$ref": "#/components/schemas/lecture"
          }
        },
        "additionalProperties": false
      },
      "notification": {
        "type": "object",
        "properties": {
          "notificationid": {
            "type": "integer",
            "format": "int32"
          },
          "userid": {
            "type": "integer",
            "format": "int32"
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isread": {
            "type": "boolean",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/user"
          }
        },
        "additionalProperties": false
      },
      "portfolio": {
        "type": "object",
        "properties": {
          "userid": {
            "type": "integer",
            "format": "int32"
          },
          "achievement": {
            "type": "string",
            "nullable": true
          },
          "addedat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/user"
          }
        },
        "additionalProperties": false
      },
      "room": {
        "type": "object",
        "properties": {
          "roomid": {
            "type": "integer",
            "format": "int32"
          },
          "roomnumber": {
            "type": "string",
            "nullable": true
          },
          "institutionid": {
            "type": "integer",
            "format": "int32"
          },
          "institution": {
            "$ref": "#/components/schemas/institution"
          },
          "lectures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lecture"
            },
            "nullable": true
          },
          "room_equipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/room_equipment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "room_equipment": {
        "type": "object",
        "properties": {
          "roomid": {
            "type": "integer",
            "format": "int32"
          },
          "equipment": {
            "type": "string",
            "nullable": true
          },
          "room": {
            "$ref": "#/components/schemas/room"
          }
        },
        "additionalProperties": false
      },
      "students_group": {
        "type": "object",
        "properties": {
          "userid": {
            "type": "integer",
            "format": "int32"
          },
          "groupid": {
            "type": "integer",
            "format": "int32"
          },
          "enrolledat": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "group": {
            "$ref": "#/components/schemas/group"
          },
          "user": {
            "$ref": "#/components/schemas/user"
          }
        },
        "additionalProperties": false
      },
      "user": {
        "type": "object",
        "properties": {
          "userid": {
            "type": "integer",
            "format": "int32"
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "patronymic": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "telephonnumber": {
            "type": "string",
            "nullable": true
          },
          "passwordhash": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "isactive": {
            "type": "boolean",
            "nullable": true
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "attendances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/attendance"
            },
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group"
            },
            "nullable": true
          },
          "lectures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lecture"
            },
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notification"
            },
            "nullable": true
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/portfolio"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}