@page "/registration"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Web
@rendermode RenderMode.InteractiveServer
@using webApplication.Contracts.user


<div class="login-form">
    <div class="form-group">
        <label for="Name">Имя *</label>
        <input @bind="model.name" id="Name" class="form-control" placeholder="Ваше имя" />
    </div>

    <div class="form-group">
        <label for="Surname">Фамилия *</label>
        <input @bind="model.surname" id="Surname" class="form-control" />
    </div>

    <div class="form-group">
        <label for="Patronymic">Отчество</label>
        <input @bind="model.patronymic" id="Patronymic" class="form-control" />
    </div>

    <div class="form-group">
        <label for="Email">Email *</label>
        <input @bind="model.email" id="Email" type="email" class="form-control" placeholder="example@mail.ru" />
    </div>

    <div class="form-group">
        <label for="telephonnumber">Телефон *</label>
        <input @bind="model.telephonnumber" id="telephonnumber" class="form-control" placeholder="+79001234567" />
    </div>

    <div class="form-group">
        <label>Роль *</label><br />
        <label>
            <input type="radio" name="role" @onchange="@(() => model.role = "Student")" />
            Студент
        </label>
        <label>
            <input type="radio" name="role" @onchange="@(() => model.role = "Teacher")" />
            Учитель
        </label>
    </div>

    <div class="form-group">
        <label for="Password">Пароль *</label>
        <input @bind="model.passwordhash" id="Password" type="password" class="form-control" />
    </div>

    <button type="button" class="btn btn-primary" @onclick="RegisterAsync" disabled="@isSubmitting">
        @(isSubmitting ? "Отправка..." : "Зарегистрироваться")
    </button>

    <p class="mt-3">
        Уже есть аккаунт? <NavLink href="/login">Войти</NavLink>
    </p>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</div>

@code {
    private CreateUserRequest model = new();
    private string ErrorMessage = "";
    private bool isSubmitting = false;

    private async Task RegisterAsync()
    {
        isSubmitting = true;
        ErrorMessage = "";


        if 
        (
            string.IsNullOrWhiteSpace(model.name) ||
            string.IsNullOrWhiteSpace(model.surname) ||
            string.IsNullOrWhiteSpace(model.email) ||
            string.IsNullOrWhiteSpace(model.telephonnumber) ||
            string.IsNullOrWhiteSpace(model.passwordhash) ||
            string.IsNullOrWhiteSpace(model.role)
        )
        {
            ErrorMessage = "Пожалуйста, заполните все обязательные поля.";
            isSubmitting = false;
            return;
        }

        try
        {

            var response = await Http.PostAsJsonAsync("api/User", model);

            if (response.IsSuccessStatusCode)
            {

                Navigation.NavigateTo("/login");
            }
            else
            {

                ErrorMessage = $"Ошибка регистрации: {(int)response.StatusCode} {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка подключения: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }



}